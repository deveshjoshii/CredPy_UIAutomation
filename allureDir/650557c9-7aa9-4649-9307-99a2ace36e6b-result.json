{"name": "test_cpl[getData0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.JavascriptException: Message: javascript error: Unexpected token ':'\n  (Session info: chrome=119.0.6045.124)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7CB4382B2+55298]\n\t(No symbol) [0x00007FF7CB3A5E02]\n\t(No symbol) [0x00007FF7CB2605AB]\n\t(No symbol) [0x00007FF7CB26509C]\n\t(No symbol) [0x00007FF7CB26732A]\n\t(No symbol) [0x00007FF7CB2DB12B]\n\t(No symbol) [0x00007FF7CB2C20AA]\n\t(No symbol) [0x00007FF7CB2DAAA4]\n\t(No symbol) [0x00007FF7CB2C1E83]\n\t(No symbol) [0x00007FF7CB29670A]\n\t(No symbol) [0x00007FF7CB297964]\n\tGetHandleVerifier [0x00007FF7CB7B0AAB+3694587]\n\tGetHandleVerifier [0x00007FF7CB80728E+4048862]\n\tGetHandleVerifier [0x00007FF7CB7FF173+4015811]\n\tGetHandleVerifier [0x00007FF7CB4D47D6+695590]\n\t(No symbol) [0x00007FF7CB3B0CE8]\n\t(No symbol) [0x00007FF7CB3ACF34]\n\t(No symbol) [0x00007FF7CB3AD062]\n\t(No symbol) [0x00007FF7CB39D3A3]\n\tBaseThreadInitThunk [0x00007FFABF687344+20]\n\tRtlUserThreadStart [0x00007FFAC0E026B1+33]", "trace": "self = <testCase.test_Cpl.Test_CPL object at 0x00000289BE39A390>\ngetData = {'credit_score': 'Excellent (720+)', 'lender_count': 11, 'lender_list': ['LightStream', 'Prosper', 'Upgrade', 'SoFi', 'Happy Money', 'LendingPoint', ...], 'loanAmount': 12000, ...}\n\n    @pytest.mark.smoke\n    def test_cpl(self,getData):\n        print(getData)\n    \n        driver=self.driver\n        executor_object = {\n            'action': 'setSessionName',\n            'arguments': {\n                'name': 'Test_CPL'\n            }\n        }\n        browserstack_executor = 'browserstack_executor: {}'.format(json.dumps(executor_object))\n>       driver.execute_script(browserstack_executor)\n\ntestCase\\test_Cpl.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:407: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000289BE175050>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"javascript error\",\"message\":\"javascript error: Unexpected token \\':\\'\\\\n ...07FF7CB39D3A3]\\\\n\\\\tBaseThreadInitThunk [0x00007FFABF687344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFAC0E026B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.JavascriptException: Message: javascript error: Unexpected token ':'\nE         (Session info: chrome=119.0.6045.124)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7CB4382B2+55298]\nE       \t(No symbol) [0x00007FF7CB3A5E02]\nE       \t(No symbol) [0x00007FF7CB2605AB]\nE       \t(No symbol) [0x00007FF7CB26509C]\nE       \t(No symbol) [0x00007FF7CB26732A]\nE       \t(No symbol) [0x00007FF7CB2DB12B]\nE       \t(No symbol) [0x00007FF7CB2C20AA]\nE       \t(No symbol) [0x00007FF7CB2DAAA4]\nE       \t(No symbol) [0x00007FF7CB2C1E83]\nE       \t(No symbol) [0x00007FF7CB29670A]\nE       \t(No symbol) [0x00007FF7CB297964]\nE       \tGetHandleVerifier [0x00007FF7CB7B0AAB+3694587]\nE       \tGetHandleVerifier [0x00007FF7CB80728E+4048862]\nE       \tGetHandleVerifier [0x00007FF7CB7FF173+4015811]\nE       \tGetHandleVerifier [0x00007FF7CB4D47D6+695590]\nE       \t(No symbol) [0x00007FF7CB3B0CE8]\nE       \t(No symbol) [0x00007FF7CB3ACF34]\nE       \t(No symbol) [0x00007FF7CB3AD062]\nE       \t(No symbol) [0x00007FF7CB39D3A3]\nE       \tBaseThreadInitThunk [0x00007FFABF687344+20]\nE       \tRtlUserThreadStart [0x00007FFAC0E026B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: JavascriptException"}, "parameters": [{"name": "getData", "value": "{'purpose': 'consolidateDebt', 'p1': '20%', 'p2': '40%', 'p3': '60%', 'p4': '80%', 'loanAmount': 12000, 'loanTerm': 4, 'state': 'Alabama', 'credit_score': 'Excellent (720+)', 'month_amount': 12000, 'lender_count': 11, 'lender_list': ['LightStream', 'Prosper', 'Upgrade', 'SoFi', 'Happy Money', 'LendingPoint', 'LendingClub', 'Best Egg', 'Avant', 'Universal Credit', 'Regional Finance']}"}], "start": 1699979846266, "stop": 1699979846350, "uuid": "6b559bcd-d9cb-400f-9811-cb3022947dc2", "testCaseId": "38241fce653b37cca07f2add86e03f7e", "fullName": "testCase.test_Cpl#test_cpl"}